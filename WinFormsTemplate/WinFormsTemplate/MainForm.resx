<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>